{"version":3,"file":"showdiff.min.js","sources":["../src/showdiff.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * This AMD module provides the functionality for the \"Show differences\"\n * button that is shown in the student's result page if their answer\n * isn't right and an \"exact-match\" (or near equivalent) grader is being used.\n *\n * @module qtype_coderunner/showdiff\n * @copyright  Richard Lobb, 2016, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\ndefine(['jquery'], function($) {\n\n    var NLCHAR = '\\u21A9';  // Unicode \"leftwards arrow with hook\" to show newlines.\n\n    /**\n     *  Given two lists of items, items1 and item2, return the length matrix\n     * M defined as M[i][j] = max subsequence length of the two item lists\n     * items1[0:i], items2[0:j]\n     * @param {array} items1 The first list of items.\n     * @param {array} items2 The second list of items.\n     * @return {array} The length matrix.\n     */\n    function lcsLengths(items1, items2) {\n\n        var n1 = items1.length,\n            n2 = items2.length,\n            lengths, i, j,\n            has_fill = typeof [1].fill === 'function';\n\n        lengths = [];\n\n        for (i = 0; i <= n1; i += 1) {\n            lengths[i] = new Array(n2 + 1);\n            if (has_fill) {\n                   lengths[i].fill(0);\n            } else {\n                // Bloody IE.\n                for (j = 0; j < n2 + 1; j++) {\n                    lengths[i][j] = 0;\n                }\n            }\n        }\n        for (i = 0; i < n1; i += 1) {\n            for (j = 0; j < n2; j += 1) {\n                if (items1[i] == items2[j]) {\n                    lengths[i + 1][j + 1] = 1 + lengths[i][j];\n                } else {\n                    lengths[i + 1][j + 1] = Math.max(lengths[i][j + 1], lengths[i + 1][j]);\n                }\n            }\n        }\n        return lengths;\n    }\n\n    /**\n     * Given two lists of items, items1 and item2, return the longest common\n     * subsequence.\n     * @param {array} items1 The first list of items.\n     * @param {array} items2 The second list of items.\n     * @return {array} The longest common subsequence.\n     */\n    function lcss(items1, items2) {\n\n        var M, i, j, n, result, length;\n        M = lcsLengths(items1, items2);\n        length = M[items1.length][items2.length];\n        result = [];\n        i = items1.length;\n        j = items2.length;\n        n = length - 1;\n        while (n >= 0) {\n            if (items1[i - 1] == items2[j - 1]) {\n                result[n] = items1[i - 1];\n                n -= 1;\n                i -= 1;\n                j -= 1;\n            } else if (M[i - 1][j] == M[i][j]) {\n                i -= 1;\n            } else {\n                j -= 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * Process the given token list and a subsequence of it, concatenating\n     * tokens and wrapping all items not in the subsequence with\n     * del tags (or whatever strings are specified by startDel, endDel).\n     * @param {array} tokens A list of tokens in the original string.\n     * @param {array} subSeq A subsequence of the tokens array.\n     * @param {string} startDel An optional string that denotes the start of\n     * a sequence of tokens to be deleted. Default '<del>'\n     * @param {string} endDel An optional string to mark the end of a sequence\n     * of deleted tokens. Default '</del>'.\n     * @return {string} The concatenated sequence of tokens with start and\n     * end delete tokens inserted to mark where the tokens from the first\n     * parameter are not present in the second.\n     */\n    function insertDels(tokens, subSeq, startDel, endDel) {\n        var html = \"\",\n            deleting = false,\n            i,\n            ssi = 0;\n        if (startDel === undefined) {\n            startDel = '<del>';\n        }\n        if (endDel === undefined) {\n            endDel = '</del>';\n        }\n        for (i = 0; i < tokens.length; i += 1) {\n            if (ssi < subSeq.length && tokens[i] == subSeq[ssi]) {\n                if (deleting) {\n                    html += endDel;\n                    deleting = false;\n                }\n                ssi += 1;\n            } else {\n                if (!deleting) {\n                    html += startDel;\n                    deleting = true;\n                }\n            }\n\n            html += tokens[i];\n        }\n        if (deleting) {\n            html += endDel;\n        }\n        return html;\n    }\n\n    /**\n     * @param {string} elem An HTML element\n     * @return {string} The HTML element type (i.e. its tag name) in lower case\n     */\n    function elType(elem) {\n        return elem.tagName.toLowerCase();\n    }\n\n    /**\n     * Return the sequence of tokens from the given HTML element.\n     * A token is either a single character or an HTML entity (&.*;)\n     * Extra 'leftward-arrow-with-hook' characters (\\u21A9) are added\n     * at the ends of lines.\n     * @param {string} element The HTML element whose contents are to be tokenised.\n     * @return {array} The list of tokens extracted from the element.\n     */\n    function getTokens(element) {\n        var isPre = elType(element) === 'pre',\n            text = element.innerHTML,\n            seq,\n            i = 0;\n\n        /**\n         * Extract and return the next token starting at text[i]. Update i.\n         * Precondition: i < text.length.\n         */\n        function nextToken() {\n            var token, match;\n            if (text[i] != '&') {\n                token = text[i];\n                i = i + 1;\n            } else {\n                match = text.substring(i, text.length).match(/(^&[a-zA-Z]+;)|(^&#[0-9]+;)|(^&#[xX][0-9a-fA-F]+;)/);\n                if (match === null) {\n                    token = text[i];\n                    i = i + 1;\n                } else {\n                    token = match[0];\n                    i = i + token.length;\n                }\n            }\n            return token;\n        }\n\n        if (isPre) {\n            text = text.replace(/\\n/g, NLCHAR + '\\n');\n        }\n        text = text.replace(/(<br ?.*?>)/g, NLCHAR + '$1');\n        seq = [];\n        i = 0;\n        while (i < text.length) {\n            seq.push(nextToken());\n        }\n\n        return seq;\n    }\n\n    /**\n     *  Given (references to) two HTML elements, extract the innerHTML\n     * of both, find the longest common subsequence of chars and wrap text not\n     * in that subsequence in del elements.\n     * <br> elements within the innerHTML are preceded by a\n     * Unicode \"leftwards arrow with hook\" ('\\u21A9') so that line break changes\n     * can be highlighted.\n     * @param {string} firstEl The first HTML element to be processed.\n     * @param {string} secondEl The second HTML element to be processed.\n     */\n    function showDifferences(firstEl, secondEl) {\n        var openDelTag = '<del>',\n            closeDelTag = '</del>',\n            seq1,\n            seq2,\n            css;\n\n        seq1 = getTokens(firstEl);\n        seq2 = getTokens(secondEl);\n        css = lcss(seq1, seq2);\n        firstEl.innerHTML = insertDels(seq1, css, openDelTag, closeDelTag);\n        secondEl.innerHTML = insertDels(seq2, css, openDelTag, closeDelTag);\n    }\n\n    /**\n     *  Given (references to) two DOM elements, delete all <del ...> and </del>\n     * tags from the innerHTML of both. Also remove the \"leftwards arrows with\n     * hooks\".\n     * @param {string} firstEl The first HTML element to be processed.\n     * @param {string} secondEl The second HTML element to be processed.\n     */\n    function hideDifferences(firstEl, secondEl) {\n        var replPat = new RegExp('(</?del[^>]*>)|(' + NLCHAR + ')', 'g');\n        firstEl.innerHTML = firstEl.innerHTML.replace(replPat, '');\n        secondEl.innerHTML = secondEl.innerHTML.replace(replPat, '');\n    }\n\n    /**\n     * Now the API for applying diffs to rows in a CodeRunner\n     * results table. Defines a class with methods initDiffButton and\n     * processAllRows.\n     * @param {array} tableRows The list of rows from the CodeRunner results table.\n     * @param {int} gotCol The column number of the 'Got' column in the table.\n     * @param {int} expectedCol The column number of the 'Expected' column.\n     * @param {function} f The function to apply to the (expected, got) pair.\n     */\n    function processAllRows(tableRows, gotCol, expectedCol, f) {\n        var row,\n            cells,\n            expected,\n            got;\n\n        for (var i = 0; i < tableRows.length; i++) {\n            row = tableRows[i];\n            cells = row.getElementsByTagName('td');\n            expected = cells[expectedCol].children[0];\n            got = cells[gotCol].children[0];\n            f(expected, got);\n        }\n    }\n\n    /**\n     * Initialise the Show Differences button.\n     * @param {string} buttonId The ID of the Show Differences button.\n     * @param {string} showValue The text in the button initially.\n     * @param {string} hideValue The text in the button when differences are showing.\n     * @param {string} expectedString The column header denoting the 'Expected' column.\n     * @param {string} gotString The column header denoting the 'Got' column.\n     */\n    function initDiffButton(buttonId, showValue, hideValue, expectedString, gotString) {\n        var diffButton = $('[id=\"' + buttonId + '\"]'),\n            table,\n            tableRows,\n            thEls,\n            columnCount=0,\n            gotCol=-1,\n            expectedCol=-1;\n\n        table = diffButton.closest('div.coderunner-test-results');\n        thEls = table.find('thead tr').children();\n        tableRows = table.find('tbody tr');\n\n        // Find 'Expected' and 'Got' columns.\n        thEls.each(function() {\n            if ($(this).html() === gotString) {\n                gotCol = columnCount;\n            } else if ($(this).html() === expectedString) {\n                expectedCol = columnCount;\n            }\n            columnCount += 1;\n        });\n\n        if (gotCol !== -1 && expectedCol !== -1) {\n            diffButton.on(\"click\", function() {\n                if (diffButton.prop('value') === showValue) {\n                    processAllRows(tableRows.toArray(), gotCol, expectedCol, showDifferences);\n                    diffButton.prop('value', hideValue);\n                } else {\n                    processAllRows(tableRows.toArray(), gotCol, expectedCol, hideDifferences);\n                    diffButton.prop('value', showValue);\n                }\n            });\n        } else {\n            diffButton.enabled = false;\n            diffButton.hide();\n        }\n    }\n\n    return { \"initDiffButton\": initDiffButton };\n});\n"],"names":["define","$","lcss","items1","items2","M","i","j","n","result","length","lengths","n1","n2","has_fill","fill","Array","Math","max","lcsLengths","insertDels","tokens","subSeq","startDel","endDel","html","deleting","ssi","undefined","getTokens","element","seq","token","match","isPre","tagName","toLowerCase","text","innerHTML","replace","NLCHAR","push","substring","showDifferences","firstEl","secondEl","seq1","seq2","css","hideDifferences","replPat","RegExp","processAllRows","tableRows","gotCol","expectedCol","f","cells","getElementsByTagName","children","buttonId","showValue","hideValue","expectedString","gotString","table","thEls","diffButton","columnCount","closest","find","each","this","on","prop","toArray","enabled","hide"],"mappings":"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"}