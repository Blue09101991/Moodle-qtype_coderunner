{"version":3,"file":"authorform.min.js","sources":["../src/authorform.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JavaScript for handling UI actions in the question authoring form.\n *\n * @module qtype_coderunner/authorform\n * @copyright  Richard Lobb, 2015, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery', 'qtype_coderunner/userinterfacewrapper', 'core/str'], function($, ui, str) {\n\n    // Define a mapping from the fields of the JSON object returned by an AJAX\n    // 'get question type' request to the form elements. Only fields that\n    // belong to the question type should appear here. Keys are JSON field\n    // names, values are a 3- or 4-element array of: a jQuery form element selector;\n    // the element property to be set; a default value if the JSON field is\n    // empty and an optional filter function to apply to the field value before\n    // setting the property with it.\n    var JSON_TO_FORM_MAP = {\n        template:            ['#id_template', 'value', ''],\n        iscombinatortemplate:['#id_iscombinatortemplate', 'checked', '',\n                                function (value) {\n                                    return value === '1' ? true : false;\n                                }],  // Need nice clean boolean for 'checked' attribute.\n        cputimelimitsecs:    ['#id_cputimelimitsecs', 'value', ''],\n        memlimitmb:          ['#id_memlimitmb', 'value', ''],\n        sandbox:             ['#id_sandbox', 'value', 'DEFAULT'],\n        sandboxparams:       ['#id_sandboxparams', 'value', ''],\n        testsplitterre:      ['#id_testsplitterre', 'value', '',\n                                function (splitter) {\n                                    return splitter.replace('\\n', '\\\\n');\n                                }],\n        allowmultiplestdins: ['#id_allowmultiplestdins', 'checked', '',\n                                function (value) {\n                                    return value === '1' ? true : false;\n                                }],\n        grader:              ['#id_grader', 'value', 'EqualityGrader'],\n        resultcolumns:       ['#id_resultcolumns', 'value', ''],\n        language:            ['#id_language', 'value', ''],\n        acelang:             ['#id_acelang', 'value', ''],\n        uiplugin:            ['#id_uiplugin', 'value', 'ace']\n    };\n\n    /**\n     * Set up the author edit form UI plugins and event handlers.\n     * The template parameters and Ace language are passed to each\n     * text area from PHP by setting its data-params and\n     * data-lang attributes.\n     */\n    function initEditForm() {\n        var typeCombo = $('#id_coderunnertype'),\n            template = $('#id_template'),\n            evaluatePerStudent = $('#id_templateparamsevalpertry'),\n            globalextra = $('#id_globalextra'),\n            prototypeextra = $('#id_prototypeextra'),\n            useace = $('#id_useace'),\n            language = $('#id_language'),\n            acelang = $('#id_acelang'),\n            customise = $('#id_customise'),\n            isCombinator = $('#id_iscombinatortemplate'),\n            testSplitterRe = $('#id_testsplitterre'),\n            allowMultipleStdins = $('#id_allowmultiplestdins'),\n            customisationFieldSet = $('#id_customisationheader'),\n            advancedCustomisation = $('#id_advancedcustomisationheader'),\n            isCustomised = customise.prop('checked'),\n            prototypeType = $('#id_prototypetype'),\n            preloadHdr = $('#id_answerpreloadhdr'),\n            typeName = $('#id_typename'),\n            courseId = $('input[name=\"courseid\"]').prop('value'),\n            questiontypeHelpDiv = $('#qtype-help'),\n            precheck = $('select#id_precheck'),\n            testtypedivs = $('div.testtype'),\n            brokenQuestion = $('#id_broken_question'),\n            uiplugin = $('#id_uiplugin'),\n            uiparameters = $('#id_uiparameters');\n\n        /**\n         * Set up the UI controller for a given textarea (one of template,\n         * answer or answerpreload).\n         * We don't attempt to process changes in template parameters,\n         * as these need to be merged with those of the prototype. But we do handle\n         * changes in the language.\n         * @param {string} taId The ID of the textarea element.\n         * @param {string} uiname The name of the UI controller (may be empty or none).\n         */\n        function setUi(taId, uiname) {\n            var ta = $(document.getElementById(taId)),  // The jquery text area element(s).\n                lang,\n                currentLang = ta.attr('data-lang'),     // Language set by PHP.\n                paramsJson = ta.attr('data-params'),    // Ui params set by PHP.\n                params = {},\n                uiWrapper;\n\n            // Set data attributes in the text area for UI components that need\n            // global extra or testcase data (e.g. gapfiller UI).\n            ta.attr('data-prototypeextra', prototypeextra.val());\n            ta.attr('data-globalextra', globalextra.val());\n            ta.attr('data-test0', $('#id_testcode_0').val());\n            try {\n                params = JSON.parse(paramsJson);\n            } catch(err) {}\n            uiname = uiname.toLowerCase();\n            if (uiname === 'none') {\n                uiname = '';\n            }\n\n            if (taId == 'id_templateparams' || taId == 'id_uiparameters') {\n                lang = ''; // These fields may be twigged, so can't be parsed by Ace.\n            } else {\n                lang = language.prop('value');\n                if (taId !== \"id_template\" && acelang.prop('value')) {\n                    lang = preferredAceLang(acelang.prop('value'));\n                }\n            }\n\n            uiWrapper = ta.data('current-ui-wrapper'); // Currently-active UI wrapper on this ta.\n\n            if (uiWrapper && uiWrapper.uiname === uiname && currentLang == lang) {\n                return; // We already have what we want - give up.\n            }\n\n            ta.attr('data-lang', lang);\n\n            if (!uiWrapper) {\n                uiWrapper = new ui.InterfaceWrapper(uiname, taId);\n            } else {\n                // Wrapper has already been set up - just reload the reqd UI.\n                params.lang = lang;\n                uiWrapper.loadUi(uiname, params);\n            }\n\n        }\n\n        /**\n         * Set the correct Ui controller on both the sample answer and the answer preload.\n         * As a special case, we don't turn on the Ui controller in the answer\n         * and answer preload fields when using Html-Ui and the ui-parameter\n         * enable_in_editor is false.\n         */\n        function setUis() {\n            var uiname = uiplugin.val();\n            var enableUi = true;\n            if (uiname === 'html' && uiparameters.val().trim() !== '') {\n                try {\n                    var uiparams = JSON.parse(uiparameters.val());\n                    if (uiparams.enable_in_editor === false) {\n                        enableUi = false;\n                    }\n                } catch (error) {\n                    alert(\"Invalid UI parameters.\");\n                }\n            }\n            if (enableUi) {\n                setUi('id_answer', uiname);\n                setUi('id_answerpreload', uiname);\n            }\n        }\n\n        /**\n         * Display or Hide all customisation parts of the form.\n         * @param {bool} isVisible True to show, false to hide.\n         */\n        function setCustomisationVisibility(isVisible) {\n            var display = isVisible ? 'block' : 'none';\n            customisationFieldSet.css('display', display);\n            advancedCustomisation.css('display', display);\n            if (isVisible && useace.prop('checked')) {\n                setUi('id_template', 'ace');\n            }\n        }\n\n\n        /**\n         * Turn on or off the Ace editor in the template and uiparameters fields\n         * so we can reload the textareas with JavaScript.\n         * Ignore if UseAce is unchecked.\n         * @param {bool} stateOn True to stop Ace, false to restart it.\n         */\n        function enableAceInCustomisedFields(stateOn) {\n            var taIds = ['id_template', 'id_uiparameters'];\n            var uiWrapper, ta;\n            if (useace.prop('checked')) {\n                for(var i = 0; i < taIds.length; i++) {\n                    ta = $(document.getElementById(taIds[i]));\n                    uiWrapper = ta.data('current-ui-wrapper');\n                    if (uiWrapper && stateOn) {\n                        uiWrapper.restart();\n                    } else if (uiWrapper && !stateOn) {\n                        uiWrapper.stop();\n                    }\n                }\n            }\n        }\n\n\n        /**\n         * After loading the form with new question type data we have to\n         * enable or disable both the testsplitterre and the allow multiple\n         * stdins field. These are subsequently enabled/disabled via event handlers\n         * set up by code in edit_coderunner_form.php (q.v.) but those event\n         * handlers do not handle the freshly downloaded state.\n         */\n        function enableTemplateSupportFields() {\n            var isCombinatorEnabled = isCombinator.prop('checked');\n\n            testSplitterRe.prop('disabled', !isCombinatorEnabled);\n            allowMultipleStdins.prop('disabled', !isCombinatorEnabled);\n        }\n\n        /**\n         * Copy fields from the AJAX \"get question type\" response into the form.\n         * @param {string} newType the newly selected question type.\n         * @param {object} response The AJAX resopnse.\n         */\n        function copyFieldsFromQuestionType(newType, response) {\n            var formspecifier, attrval, filter;\n\n            enableAceInCustomisedFields(false);\n            for (var key in JSON_TO_FORM_MAP) {\n                formspecifier = JSON_TO_FORM_MAP[key];\n                attrval = response[key] ? response[key] : formspecifier[2];\n                if (formspecifier.length > 3) {\n                    filter = formspecifier[3];\n                    attrval = filter(attrval);\n                }\n                $(formspecifier[0]).prop(formspecifier[1], attrval);\n            }\n\n            typeName.prop('value', newType);\n            customise.prop('checked', false);\n            str.get_string('coderunner_question_type', 'qtype_coderunner').then(function (s) {\n                questiontypeHelpDiv.html(detailsHtml(newType, s, response.questiontext));\n            });\n\n            setCustomisationVisibility(false);\n            enableTemplateSupportFields();\n        }\n\n        /**\n         * A JSON request for a question type returned a 'failure' response - probably a\n         * missing question type. Report the error with an alert, and replace\n         * the template contents with an error message in case the user\n         * saves the question and later wonders why it breaks.\n         * @param {string} questionType The CodeRunner (sub) question type.\n         * @param {string} error The error message to be reported.\n         */\n        function reportError(questionType, error) {\n            langStringAlert('prototype_load_failure', error);\n            str.get_string('prototype_error', 'qtype_coderunner').then(function(s) {\n                var errorMessage = s + \"\\n\";\n                errorMessage += error + '\\n';\n                errorMessage += \"CourseId: \" + courseId + \", qtype: \" + questionType;\n                template.prop('value', errorMessage);\n            });\n        }\n\n        /**\n         * Local function to return the HTML to display in the\n         * question type details section of the form.\n         * @param {string} title The type of the question being described.\n         * @param {string} coderunner_descr The language string to introduce\n         * the detail.\n         * @param {html} html The HTML description of the question type, namely\n         * the question text from its prototype.\n         * @return {html} The composite HTML describing the question type.\n         */\n        function detailsHtml(title, coderunner_descr, html) {\n\n            var resultHtml = '<p class=\"question-type-details-header\">';\n            resultHtml += coderunner_descr;\n            resultHtml += title + '</p>\\n' + html;\n            return resultHtml;\n\n        }\n\n        /**\n         * Raise an alert with the given language string and possible additional\n         * extra text.\n         * @param {string} key The language string to put in the Alert.\n         * @param {string} extra Extra text to append.\n         */\n        function langStringAlert(key, extra) {\n            if (window.hasOwnProperty('behattesting') && window.behattesting) {\n                return;\n            }\n            str.get_string(key, 'qtype_coderunner').then(function(s) {\n                var message = s.replace(/\\n/g, \" \");\n                if (extra) {\n                    message += '\\n' + extra;\n                }\n                alert(message);\n            });\n        }\n\n        /**\n         * Get the \"preferred language\" from the AceLang string supplied.\n         * @param {string} acelang The AceLang string.\n         * For multilanguage questions, this is either the default (i.e.,\n         * the language with a '*' suffix), or the first language. Otherwise\n         * it is simply the entire AceLang string.\n         * @return {string} The language to pass to Ace for syntax highlighting.\n         */\n        function preferredAceLang(acelang) {\n            var langs, i;\n            if (acelang.indexOf(',') < 0) {\n                return acelang;\n            } else {\n                langs = acelang.split(',');\n                for (i = 0; i < langs.length; i++) {\n                    if (langs[i].endsWith('*')) {\n                        return langs[i].substr(0, langs[i].length - 1);\n                    }\n                }\n                return langs.length > 0 ? langs[0] : '';\n            }\n        }\n\n        /**\n         * Load the various customisation fields into the form from the\n         * CodeRunner question type currently selected by the combobox.\n         */\n        function loadCustomisationFields() {\n            var newType = typeCombo.children('option:selected').text();\n\n            if (newType !== '' && newType !== 'Undefined') {\n                // Prevent 'Undefined' ever being reselected.\n                typeCombo.children('option:first-child').prop('disabled', 'disabled');\n\n                // Load question type with ajax.\n                $.getJSON(M.cfg.wwwroot + '/question/type/coderunner/ajax.php',\n                    {\n                        qtype: newType,\n                        courseid: courseId,\n                        sesskey: M.cfg.sesskey\n                    },\n                    function (outcome) {\n                        if (outcome.success) {\n                            copyFieldsFromQuestionType(newType, outcome);\n                            setUis();\n                        }\n                        else {\n                            reportError(newType, outcome.error);\n                        }\n\n                    }\n                ).fail(function () {\n                    // AJAX failed. We're dead, Fred. The attempt to get the\n                    // language translation for the error message will likely\n                    // fail too, so use English for a start.\n                    langStringAlert('error_loading_prototype');\n                    template.prop('value', '*** AJAX ERROR. DON\\'T SAVE THIS! ***');\n                    str.get_string('ajax_error', 'qtype_coderunner').then(function(s) {\n                        template.prop('value', s);  // Translates into current language (if it works).\n                    });\n                });\n            }\n        }\n\n        /**\n         * Build an HTML table describing all the UI parameters.\n         * @param {object} uiParamInfo The object describing the parameters\n         * for a particular UI.\n         * @return {string} An HTML table describing each UI parameter.\n         */\n        function UiParameterDescriptionTable(uiParamInfo) {\n            var html = '<div class=\"uiparamtablediv\"><table class=\"uiparamtable\">\\n',\n                hdrs = uiParamInfo.columnheaders, param, i;\n            html += \"<tr><th>\" + hdrs[0] + \"</th><th>\" + hdrs[1] + \"</th><th>\" + hdrs[2] + \"</th></tr>\\n\";\n            for (i = 0; i < uiParamInfo.uiparamstable.length; i++) {\n                param = uiParamInfo.uiparamstable[i];\n                html += \"<tr><td>\" + param[0] + \"</td><td>\" + param[1] + \"</td><td>\" + param[2] + \"</td></tr>\\n\";\n            }\n            html += \"</table></div>\\n\";\n            return html;\n        }\n\n        /**\n         * Load the UI parameter description field by Ajax when the UI plugin\n         * is changed.\n         */\n        function loadUiParametersDescription() {\n            var newUi = uiplugin.children('option:selected').text();\n            $.getJSON(M.cfg.wwwroot + '/question/type/coderunner/ajax.php',\n                {\n                    uiplugin: newUi,\n                    courseid: courseId,\n                    sesskey: M.cfg.sesskey\n                },\n                function (uiInfo) {\n                    var currentuiparameters = uiparameters.val(),\n                        paramDescriptionDiv = $('.ui_parameters_descr'),\n                        showhidebutton = $('<button type=\"button\" class=\"toggleuidetails\">' + uiInfo.showdetails + '</button>'),\n                        table;\n                    paramDescriptionDiv.empty();\n                    paramDescriptionDiv.append(uiInfo.header);\n                    if (uiInfo.uiparamstable.length == 0 && currentuiparameters.trim() === '') {\n                        uiparameters.val(''); // Remove stray white space.\n                        $('#fgroup_id_uiparametergroup').hide();\n                    } else {\n                        if (uiInfo.uiparamstable.length != 0) {\n                            paramDescriptionDiv.append(showhidebutton);\n                            table = $(UiParameterDescriptionTable(uiInfo));\n                            paramDescriptionDiv.append(table);\n                            table.hide();\n                            showhidebutton.click(function () {\n                                if (showhidebutton.html() == uiInfo.showdetails) {\n                                    table.show();\n                                    showhidebutton.html(uiInfo.hidedetails);\n                                } else {\n                                    table.hide();\n                                    showhidebutton.html(uiInfo.showdetails);\n                                }\n                            });\n                        }\n                        $('#fgroup_id_uiparametergroup').show();\n                        if (useace.prop('checked')) {\n                            setUi('id_uiparameters', 'ace');\n                        }\n                    }\n                }\n            ).fail(function () {\n                // AJAX failed.\n                langStringAlert('error_loading_ui_descr');\n            });\n        }\n\n        /**\n         * Show/hide all testtype divs in the testcases according to the\n         * 'Precheck' selector.\n         */\n        function set_testtype_visibilities() {\n            if (precheck.val() === '3') { // Show only for case of 'Selected'.\n                testtypedivs.show();\n            } else {\n                testtypedivs.hide();\n            }\n        }\n\n        /**\n         * Check that the Ace language is correctly set for the answer and\n         * answer preload fields.\n         */\n        function check_ace_lang() {\n            if (uiplugin.val() === 'ace'){\n                setUis();\n            }\n        }\n\n        /**\n         * Check that the Ace language is correctly set for the template,\n         * if template_uses_ace is checked.\n         */\n        function check_template_lang() {\n            if (useace.prop('checked')) {\n                setUi('id_template', 'ace');\n            }\n        }\n\n        /**\n         * If the brokenquestionmessage hidden element is not empty, insert the\n         * given message as an error at the top of the question.\n         */\n        function checkForBrokenQuestion() {\n            var brokenQuestionMessage = brokenQuestion.prop('value'),\n                messagePara = null;\n            if (brokenQuestionMessage !== '') {\n                messagePara = $('<p>' + brokenQuestion.prop('value') + '</p>');\n                $('#id_qtype_coderunner_error_div').append(messagePara);\n            }\n        }\n\n        /*************************************************************\n         *\n         * Body of initEditFormWhenReady starts here.\n         *\n         *************************************************************/\n\n        if (prototypeType.prop('value') == 1) {\n            // Editing a built-in question type: Dangerous!\n            str.get_string('proceed_at_own_risk', 'qtype_coderunner').then(function(s) {\n                alert(s);\n            });\n            prototypeType.prop('disabled', true);\n            typeCombo.prop('disabled', true);\n            customise.prop('disabled', true);\n        }\n\n        checkForBrokenQuestion();\n\n        setCustomisationVisibility(isCustomised);\n        if (!isCustomised) {\n            // Not customised so have to load fields from prototype.\n            loadCustomisationFields();  // setUis is called when this completes.\n        } else {\n            setUis();  // Set up UI controllers on answer and answerpreload.\n            str.get_string('info_unavailable', 'qtype_coderunner').then(function(s) {\n                questiontypeHelpDiv.html(\"<p>\" + s + \"</p>\");\n            });\n        }\n\n        set_testtype_visibilities();\n\n        if (useace.prop('checked')) {\n            setUi('id_templateparams', 'ace');\n            setUi('id_uiparameters', 'ace');\n        }\n\n        loadUiParametersDescription();\n\n        // Set up event Handlers.\n\n        customise.on('change', function() {\n            var isCustomised = customise.prop('checked');\n            if (isCustomised) {\n                // Customisation is being turned on.\n                setCustomisationVisibility(true);\n            } else { // Customisation being turned off.\n                str.get_string('confirm_proceed', 'qtype_coderunner').then(function(s) {\n                    if (window.confirm(s)) {\n                        setCustomisationVisibility(false);\n                    } else {\n                        customise.prop('checked', true);\n                    }\n                });\n            }\n        });\n\n        acelang.on('change', check_ace_lang);\n        language.on('change', function() {\n            check_template_lang();\n            check_ace_lang();\n        });\n\n        typeCombo.on('change', function() {\n            if (customise.prop('checked')) {\n                // Author has customised the question. Ask if they want to reload inherited stuff.\n                str.get_string('question_type_changed', 'qtype_coderunner').then(function (s) {\n                    if (window.confirm(s)) {\n                        loadCustomisationFields();\n                    }\n                });\n            } else {\n                loadCustomisationFields();\n            }\n        });\n\n        useace.on('change', function() {\n            var isTurningOn = useace.prop('checked');\n            if (isTurningOn) {\n                setUi('id_template', 'ace');\n                setUi('id_templateparams', 'ace');\n                setUi('id_uiparameters', 'ace');\n            } else {\n                setUi('id_template', '');\n                setUi('id_templateparams', '');\n                setUi('id_uiparameters', '');\n            }\n        });\n\n        evaluatePerStudent.on('change', function() {\n            if (evaluatePerStudent.is(':checked')) {\n                langStringAlert('templateparamsusingsandbox');\n            }\n        });\n\n        uiplugin.on('change', function () {\n            setUis();\n            loadUiParametersDescription();\n        });\n\n        precheck.on('change', set_testtype_visibilities);\n\n        // In order to initialise the Ui plugin when the answer preload section is\n        // expanded, we monitor attribute mutations in the Answer Preload\n        // header.\n        var observer = new MutationObserver( function () {\n            setUis();\n        });\n        observer.observe(preloadHdr.get(0), {'attributes': true});\n\n        // Setup click handler for the buttons that allow users to replace the\n        // expected output  with the output got from testing the answer program.\n        $('button.replaceexpectedwithgot').click(function() {\n            var gotPre = $(this).prev('pre[id^=\"id_got_\"]');\n            var testCaseId = gotPre.attr('id').replace('id_got_', '');\n            $('#id_expected_' + testCaseId).val(gotPre.text());\n            $('#id_fail_expected_' + testCaseId).html(gotPre.text());\n            $('.failrow_' + testCaseId).addClass('fixed');  // Fixed row.\n            $(this).prop('disabled', true);\n        });\n    }\n\n    return {initEditForm: initEditForm};\n});"],"names":["define","$","ui","str","JSON_TO_FORM_MAP","template","iscombinatortemplate","value","cputimelimitsecs","memlimitmb","sandbox","sandboxparams","testsplitterre","splitter","replace","allowmultiplestdins","grader","resultcolumns","language","acelang","uiplugin","initEditForm","messagePara","typeCombo","evaluatePerStudent","globalextra","prototypeextra","useace","customise","isCombinator","testSplitterRe","allowMultipleStdins","customisationFieldSet","advancedCustomisation","isCustomised","prop","prototypeType","preloadHdr","typeName","courseId","questiontypeHelpDiv","precheck","testtypedivs","brokenQuestion","uiparameters","setUi","taId","uiname","lang","uiWrapper","ta","document","getElementById","currentLang","attr","paramsJson","params","val","JSON","parse","err","toLowerCase","langs","i","indexOf","split","length","endsWith","substr","preferredAceLang","data","loadUi","InterfaceWrapper","setUis","enableUi","trim","enable_in_editor","error","alert","setCustomisationVisibility","isVisible","display","css","copyFieldsFromQuestionType","newType","response","formspecifier","attrval","isCombinatorEnabled","key","stateOn","taIds","restart","stop","enableAceInCustomisedFields","filter","get_string","then","s","title","coderunner_descr","html","resultHtml","questiontext","langStringAlert","extra","window","hasOwnProperty","behattesting","message","loadCustomisationFields","children","text","getJSON","M","cfg","wwwroot","qtype","courseid","sesskey","outcome","questionType","success","errorMessage","fail","loadUiParametersDescription","newUi","uiInfo","table","currentuiparameters","paramDescriptionDiv","showhidebutton","showdetails","empty","append","header","uiparamstable","hide","uiParamInfo","param","hdrs","columnheaders","UiParameterDescriptionTable","click","show","hidedetails","set_testtype_visibilities","check_ace_lang","on","confirm","is","MutationObserver","observe","get","gotPre","this","prev","testCaseId","addClass"],"mappings":"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"}