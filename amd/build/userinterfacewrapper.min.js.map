{"version":3,"file":"userinterfacewrapper.min.js","sources":["../src/userinterfacewrapper.js"],"sourcesContent":["/******************************************************************************\n *\n * This module provides a wrapper for user-interface modules, handling hiding\n * of the textArea that is being replaced by the UI element,\n * resizing of the UI component, and support of such usability functions as\n * ctrl-alt-M to disable/re-enable the entire user interface, including the\n * wrapper.\n *\n * @module coderunner/userinterfacewrapper\n * @copyright  Richard Lobb, 2015, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n *\n * The InterfaceWrapper class is constructed either by Moodle PHP calls of\n * the form\n *\n * $PAGE->requires->js_call_amd($modulename, $functionname, $params)\n *\n * (e.g. from within render.php) or by JavaScript require calls, e.g. from\n * authorform.js when the question author changes UI type.\n *\n * The InterfaceWrapper provides:\n *\n * 1. A constructor InterfaceWrapper(uiname, textareaId) which\n *    hides the given text area, replaces it with a wrapper div (resizable in\n *    height by the user but with width resizing managed by changes in window\n *    width), created an instance of nameInstance as defined in the file\n *    ui_name.js (see below).\n *    params is a record containing the decoded value of\n *\n * 2. A stop() method that destroys the embedded UI and hides the wrapper.\n *\n * 3. A restart() method that shows the wrapper again and re-creates the prior\n *    embedded UI component within it.\n *\n * 4. A loadUi(uiname, params) method that kills any currently running UI element\n *    (if there is one) and (re)loads the specified one. The params parameter\n *    is a record that allows additional parameters to be passed in, such as\n *    those from the question's uiParams field and, in the case of the\n *    Ace UI, the 'lang' (language) that the editor is editing. This data\n *    is supplied by the PHP via the data-params attribute of the answer's\n *    base textarea.\n *\n * 5. Regular checking for any resizing of the wrapper, which are passed on to\n *    the embedded UI element's resize() method.\n *\n * 6. Monitoring of alt-ctrl-M key presses which toggle the visibility of the\n *    wrapper plus UI element and the syncronised textArea by calls to stop()\n *    and restart\n *\n * =========================================================================\n *\n * The embedded user-interface module must be defined in a JavaScript file\n * of the form ui_name.js which must define a class nameInstance with\n * the following functionality:\n *\n * 1. A constructor SomeUiName(textareaId, width, height, params) that\n *    builds an HTML component of the given width and height. textareaId is the\n *    ID of the textArea from which the UI element should obtain its initial\n *    serialisation and to which it should write the serialisation when its save\n *    or destroy methods are called. params is a JavaScript object,\n *    decoded from the JSON uiParams defined by the question plus any\n *    additional data required, such as the 'lang' in the case of Ace.\n *\n * 2. A getElement() method that returns the HTML element that the\n *    InterfaceWrapper is to insert into the document tree.\n *\n * 3. A method failed() that should return true unless the constructor\n *    failed (e.g. because it was not able to de-serialise the text area's\n *    contents). The wrapper will call destroy() on the object if failed()\n *    returns true and abort the use of the UI element. The text area will\n *    have the uiloadfailed class added, which CSS will display in some\n *    error mode (e.g. a red border).\n *\n * 4. A method failMessage() that will be called only when failed() returns\n *    True. It should be a defined CodeRunner language string key.\n *\n * 5. A sync() method that copies the serialised represention of the UI plugin's\n *    data to the related TextArea. This is used when submit is clicked.\n *\n * 6. A destroy() method that should sync the contents to the text area then\n *    destroy any HTML elements or other created content. This method is called\n *    when CTRL-ALT-M is typed by the user to turn off all UI plugins\n *\n * 7. A resize(width, height) method that should resize the entire UI element\n *    to the given dimensions.\n *\n * 8. A hasFocus() method that returns true if the UI element has focus.\n *\n * 9. A syncIntervalSecs() method that returns the time interval between\n *    calls to the sync() method. 0 for no sync calls. The userinterfacewrapper\n *    provides all instances with a generic (base-class) version that returns\n *    the value of a UI parameter sync_interval_secs if given else uses the\n *    UI interface wrapper default (currently 10).\n *\n * The return value from the module define is a record with a single field\n * 'Constructor' that references the constructor (e.g. Graph, AceWrapper etc)\n *\n *****************************************************************************/\n\n/**\n * This file is part of Moodle - http:moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more util.details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http:www.gnu.org/licenses/>.\n */\n\n\ndefine(['jquery'], function($) {\n    /**\n     * Constructor for a new user interface.\n     * @param {string} uiname The name of the interface element (e.g. ace, graph, etc)\n     * which should be in file ui_ace.js, ui_graph.js etc.\n     * @param {string} textareaId The id of the text area that the UI is to manage.\n     * The text area should have an attribute data-params, which is a\n     * JSON encoded record containing whatever additional parameters might\n     * be needed by the User interface. As a minimum it should contain all\n     * the parameters from the uiparameters field of\n     * the question so that question authors can pass in additional data\n     * such as whether graph edges are bidirectional or not in the case of\n     * the graph UI. Additionally the Ace editor requires a 'lang' field\n     * to specify what language the editor is editing.\n     * When the wrapper has been set up on a text area, the text area's\n     * data attribute contains an entry for 'current-ui-wrapper' that is\n     * a reference to the wrapper ('this').\n     */\n    function InterfaceWrapper(uiname, textareaId) {\n        let t = this; // For use by embedded functions.\n\n        this.GUTTER = 14;  // Size of gutter at base of wrapper Node (pixels)\n        this.DEFAULT_SYNC_INTERVAL_SECS = 5;\n\n        const PIXELS_PER_ROW = 19;  // For estimating height of textareas.\n        const MAX_GROWN_ROWS = 50;  // Upper limit to artifically grown textarea rows.\n        const MIN_WRAPPER_HEIGHT = 50;\n\n        this.taId = textareaId;\n        this.loadFailId = textareaId + '_loadfailerr';\n        const ta = document.getElementById(textareaId);\n        this.textArea = $(ta);\n        const params = this.textArea.attr('data-params');\n        if (params) {\n            this.uiParams = JSON.parse(params);\n        } else {\n            this.uiParams = {};\n        }\n        this.uiParams.lang = this.textArea.attr('data-lang');\n        this.readOnly = this.textArea.prop('readonly');\n        this.isLoading = false;   // True if we're busy loading a UI element.\n        this.loadFailed = false;  // True if UI failed to initialise properly.\n        this.retries = 0;         // Number of failed attempts to load a UI component.\n\n        let h = parseInt(this.textArea.css(\"height\"));\n        let content_lines = this.textArea.val().split('\\n').length;\n        let rows = ta.rows;\n        if (content_lines > rows) {\n            // Allow reloaded text areas with lots of text to grow bigger, within limits.\n            rows = Math.min(content_lines, MAX_GROWN_ROWS);\n        }\n        h = Math.max(h, rows * PIXELS_PER_ROW, MIN_WRAPPER_HEIGHT);\n\n        /**\n         * Construct an empty hidden wrapper div, inserted directly after the\n         * textArea, ready to contain the actual UI.\n         */\n        this.wrapperNode = $(\"<div id='\" + this.taId + \"_wrapper' class='ui_wrapper'></div>\");\n        this.textArea.after(this.wrapperNode);\n        this.wrapperNode.hide();\n        this.wrapperNode.css({\n            resize: 'vertical',\n            overflow: 'hidden',\n            minHeight: h,\n            width: \"100%\",\n            border: \"1px solid darkgrey\"\n        });\n\n        /**\n         * Record a reference to this wrapper in the text area's data attribute\n         * for use by external javascript that needs to interact with the\n         * wrapper, e.g. the multilanguage.js module.\n         */\n        this.textArea.data('current-ui-wrapper', this);\n\n        /**\n         * Load the UI into the wrapper (aysnchronous).\n         */\n        this.uiInstance = null;  // Defined by loadUi asynchronously\n        this.loadUi(uiname, this.uiParams);  // Load the required UI element\n\n        /**\n         * Add event handlers\n         */\n        $(document).mousemove(function() {\n            t.checkForResize();\n        });\n        $(window).resize(function() {\n            t.checkForResize();\n        });\n        this.textArea.closest('form').submit(function() {\n            if (t.uiInstance !== null) {\n                t.uiInstance.sync();\n            }\n        });\n        $(document.body).on('keydown', function(e) {\n            const KEY_M = 77;\n            if (e.keyCode === KEY_M && e.ctrlKey && e.altKey) {\n                if (t.uiInstance !== null || t.loadFailed) {\n                    t.stop();\n                } else {\n                    t.restart();        // Reactivate\n                }\n            }\n        });\n    }\n\n    /**\n     * Load the specified UI element (which in the case of Ace will need\n     * to know the language, lang, as well - this must be supplied as\n     * a 'lang' attribute of the record params.\n     * When ui is up and running, this.uiInstance will reference it.\n     * To avoid a potential race problem, if this method is already busy\n     * with a load, try again in 200 msecs.\n     * @param {string} uiname The name of the User Interface to be used.\n     * @param {object} params The UI parameters object that passes parameters\n     * to the actual UI object.\n     */\n    InterfaceWrapper.prototype.loadUi = function(uiname, params) {\n        const t = this,\n            errPart1 = 'Failed to load ',\n            errPart2 = ' UI component. If this error persists, please report it to the forum on coderunner.org.nz';\n\n        /**\n         * Get the given language string and plug it into the given jQuery\n         * div element as its html, plus a 'fallback' message on a separate line.\n         * @param {string} langString The language string specifier for the error message,\n         * to be loaded by AJAX.\n         * @param {object} errorDiv The div object into which the error message\n         * is to be inserted.\n         */\n        function setLoadFailMessage(langString, errorDiv) {\n            require(['core/str'], function(str) {\n                /**\n                 * Get langString text via AJAX\n                 */\n                const\n                    s = str.get_string(langString, 'qtype_coderunner'),\n                    fallback = str.get_string('ui_fallback', 'qtype_coderunner');\n                $.when(s, fallback).done(function(s, fallback) {\n                    errorDiv.html(s + '<br>' + fallback);\n                });\n            });\n        }\n\n        /**\n         * The default method for a UIs sync_interval_secs method.\n         * Returns the sync_interval_secs parameter if given, else\n         * DEFAULT_SYNC_INTERVAL_SECS.\n         */\n        function syncIntervalSecsBase() {\n            if (params.hasOwnProperty('sync_interval_secs')) {\n                return parseInt(params.sync_interval_secs);\n            } else {\n                return t.DEFAULT_SYNC_INTERVAL_SECS;\n            }\n        }\n\n        if (this.isLoading) {  // Oops, we're loading a UI element already\n            this.retries += 1;\n            if (this.retries > 20) {\n                alert(errPart1 + uiname + errPart2);\n                this.retries = 0;\n                this.loading = 0;\n            } else {\n                setTimeout(function() {\n                    t.loadUi(uiname, params);\n                }, 200); // Try again in 200 msecs\n            }\n            return;\n        }\n        this.retries = 0;\n        this.params = params;  // Save in case need to restart\n\n        this.stop();  // Kill any active UI first\n        this.uiname = uiname;\n\n        if (this.uiname === '' || this.uiname === 'none' || sessionStorage.getItem('disableUis')) {\n            this.uiInstance = null;\n        } else {\n            this.isLoading = true;\n            require(['qtype_coderunner/ui_' + this.uiname],\n                function(ui) {\n                    const h = t.wrapperNode.innerHeight() - t.GUTTER;\n                    const w = t.wrapperNode.innerWidth();\n                    const uiInstance = new ui.Constructor(t.taId, w, h, params);\n                    if (uiInstance.failed()) {\n                        /*\n                         * Constructor failed to load serialisation.\n                         * Set uiloadfailed class on text area.\n                         */\n                        t.loadFailed = true;\n                        t.wrapperNode.hide();\n                        uiInstance.destroy();\n                        t.uiInstance = null;\n                        t.textArea.addClass('uiloadfailed');\n                        const loadFailDiv = '<div id=\"' + t.loadFailId + '\"class=\"uiloadfailed\"></div>';\n                        let jqLoadFailDiv = $(loadFailDiv);\n                        jqLoadFailDiv.insertBefore(t.textArea);\n                        setLoadFailMessage(uiInstance.failMessage(), jqLoadFailDiv);  // Insert error by AJAX\n                    } else {\n                        t.hLast = 0;  // Force resize (and hence redraw)\n                        t.wLast = 0;  // ... on first call to checkForResize\n                        t.textArea.hide();\n                        t.wrapperNode.show();\n                        t.wrapperNode.append(uiInstance.getElement());\n                        t.uiInstance = uiInstance;\n                        t.loadFailed = false;\n                        t.checkForResize();\n\n                        /*\n                         * Set a default syncIntervalSecs method if uiInstance lacks one.\n                         */\n                        let uiInstancePrototype = Object.getPrototypeOf(uiInstance);\n                        uiInstancePrototype.syncIntervalSecs = uiInstancePrototype.syncIntervalSecs || syncIntervalSecsBase;\n                        t.startSyncTimer(uiInstance);\n                    }\n                    t.isLoading = false;\n                });\n        }\n    };\n\n\n    /**\n     * Start a sync timer on the given uiInstance, unless its time interval is 0.\n     * @param {object} uiInstance The instance of the user interface object whose\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.startSyncTimer = function(uiInstance) {\n        const timeout = uiInstance.syncIntervalSecs();\n        if (timeout) {\n            this.uiInstance.timer = setInterval(function () {\n                uiInstance.sync();\n            }, timeout * 1000);\n        } else {\n            this.uiInstance.timer = null;\n        }\n    };\n\n\n    /**\n     * Stop the sync timer on the given uiInstance, if running.\n     * @param {object} uiInstance The instance of the user interface object whose\n     * timer is to be set up.\n     */\n    InterfaceWrapper.prototype.stopSyncTimer = function(uiInstance) {\n        if (uiInstance.timer) {\n            clearTimeout(uiInstance.timer);\n        }\n    };\n\n\n    InterfaceWrapper.prototype.stop = function() {\n        /*\n         * Disable (shutdown) the embedded ui component.\n         * The wrapper remains active for ctrl-alt-M events, but is hidden.\n         */\n        if (this.uiInstance !== null) {\n            this.stopSyncTimer(this.uiInstance);\n            this.textArea.show();\n            if (this.uiInstance.hasFocus()) {\n                this.textArea.focus();\n                this.textArea[0].selectionStart = this.textArea[0].value.length;\n            }\n            this.uiInstance.destroy();\n            this.uiInstance = null;\n            this.wrapperNode.hide();\n        }\n        this.loadFailed = false;\n        this.textArea.removeClass('uiloadfailed'); // Just in case it failed before\n        $(document.getElementById(this.loadFailId)).remove();\n    };\n\n    /*\n     * Re-enable the ui element (e.g. after alt-cntrl-M). This is\n     * a full re-initialisation of the ui element.\n     */\n    InterfaceWrapper.prototype.restart = function() {\n        if (this.uiInstance === null) {\n            /**\n             * Restart the UI component in the textarea\n             */\n            this.loadUi(this.uiname, this.params);\n        }\n    };\n\n\n    /**\n     * Check for wrapper resize - propagate to ui element.\n     */\n    InterfaceWrapper.prototype.checkForResize = function() {\n        const SIZE_HACK = 25;  // Horrible but best I can do. TODO: FIXME\n\n        if (this.uiInstance) {\n            const h = this.wrapperNode.innerHeight();\n            const w = this.wrapperNode.innerWidth();\n            if (h != this.hLast || w != this.wLast) {\n                const xLeft = this.wrapperNode.offset().left;\n                const maxWidth = $(window).innerWidth() - xLeft - SIZE_HACK;\n                const hAdjusted = h - this.GUTTER;\n                const wAdjusted = Math.min(maxWidth, w);\n                this.uiInstance.resize(wAdjusted,  hAdjusted);\n                this.hLast = this.wrapperNode.innerHeight();\n                this.wLast = this.wrapperNode.innerWidth();\n            }\n        }\n    };\n\n    /**\n     * The external entry point from the PHP.\n     * @param {string} uiname The name of the User Interface to use e.g. 'ace'\n     * @param {string} textareaId The ID of the textarea to be wrapped.\n     */\n    function newUiWrapper(uiname, textareaId) {\n        if (uiname) {\n            return new InterfaceWrapper(uiname, textareaId);\n        } else {\n            return null;\n        }\n    }\n\n\n    return {\n        newUiWrapper: newUiWrapper,\n        InterfaceWrapper: InterfaceWrapper\n    };\n});\n"],"names":["define","$","InterfaceWrapper","uiname","textareaId","t","this","GUTTER","DEFAULT_SYNC_INTERVAL_SECS","taId","loadFailId","ta","document","getElementById","textArea","params","attr","uiParams","JSON","parse","lang","readOnly","prop","isLoading","loadFailed","retries","h","parseInt","css","content_lines","val","split","length","rows","Math","min","max","wrapperNode","after","hide","resize","overflow","minHeight","width","border","data","uiInstance","loadUi","mousemove","checkForResize","window","closest","submit","sync","body","on","e","keyCode","ctrlKey","altKey","stop","restart","prototype","syncIntervalSecsBase","hasOwnProperty","sync_interval_secs","alert","loading","setTimeout","sessionStorage","getItem","require","ui","langString","errorDiv","innerHeight","w","innerWidth","Constructor","failed","destroy","addClass","loadFailDiv","jqLoadFailDiv","insertBefore","failMessage","str","s","get_string","fallback","when","done","html","hLast","wLast","show","append","getElement","uiInstancePrototype","Object","getPrototypeOf","syncIntervalSecs","startSyncTimer","timeout","timer","setInterval","stopSyncTimer","clearTimeout","hasFocus","focus","selectionStart","value","removeClass","remove","xLeft","offset","left","maxWidth","hAdjusted","wAdjusted","newUiWrapper"],"mappings":"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"}